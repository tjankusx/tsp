<?php

//phpinfo();
//die();

// set up array of points for polygon
$nodes = [];
$nodesCount = 0;
$imageWidth = 808;
$imageHeight = 808;

$originalOrderNodes = [];

class TspNode {
    public $x;
    public $y;
    public $distanceTo;

}



$toImport = [
    [1, 4],
    [93, 82],
[29, 70],
[100, 10],
[36, 27],
[2, 41],
[73, 42],
[65, 13],
[56, 93],
[4, 91],
[41, 2],
[98, 44],
[59, 68],
[4, 67],
[28, 91],
[54, 36],
[82, 64],
[25, 45],
[94, 27],
[21, 17],
[84, 2],
[74, 80],
[1, 23]
];

$toImport = [
[0, 0],
[0, 100],
[99, 100],
[98, 0],
[100, 4],
[1, 4],
[1, 10],
[1, 23],
[1, 29],
[1, 32],
[1, 35],
[1, 60],
[1, 65],
[1, 70],
[1, 79],
[1, 93],
[1, 95],
[29, 70],
[100, 10],
[93, 82],
[36, 27],
[2, 41],
[73, 42],
[65, 13],
[56, 93],
[4, 91],
[41, 2],
[98, 44],
[59, 68],
[4, 67],
[28, 91],
[54, 36],
[82, 64],
[25, 45],
[94, 27],
[21, 17],
[84, 2],
[74, 80],
[73, 97],
[16, 81],
[48, 17],
[47, 50],
[80, 20],
[46, 70],
[68, 31],
[59, 81],
[94, 61],
[18, 56],
[40, 84],
[84, 92],
[37, 42],
[18, 30],
[44, 97],
[27, 1],
[6, 54],
[62, 2],
[99, 95],
[60, 57],
[17, 68],
[58, 23],
[83, 37],
[32, 54],
[85, 51],
[32, 11],
[72, 69],
[72, 2],
[15, 6],
[90, 73],
[17, 92],
[75, 57],
[99, 74],
[51, 1],
[41, 61],
[14, 40],
[89, 15],
[48, 28],
[25, 36],
[47, 41],
[84, 81],
[0, 13],
[11, 25],
[48, 81],
[66, 50],
[65, 74],
[91, 37],
[63, 41],
[55, 46],
[38, 74],
[49, 58],
[11, 14],
[81, 10],
[66, 87],
[26, 82],
[99, 54],
[34, 98],
[25, 62],
[43, 10],
[56, 12],
[79, 29],
[9, 1],
[72, 87],
[11, 60],
[86, 29],
[70, 23],
[9, 76],
[87, 57],
[26, 23],
[39, 51],
[99, 86],
[73, 11],
[44, 34],
[33, 34],
[8, 47],
[92, 6],
[81, 72],
[36, 19],
[4, 33],
[52, 88],
[35, 66],
[90, 97],
[21, 74],
[67, 65],
[91, 45],
[10, 85],
[98, 21],
[25, 10],
[98, 33],
[0, 98],
[32, 75],
[87, 21],
[92, 54],
[53, 70],
[33, 47],
[2, 47],
[99, 66],
[92, 89],
[76, 50],
[37, 92],
[49, 65],
[62, 93],
[68, 37],
[28, 16],
[64, 26],
[78, 89],
[20, 50],
[34, 2],
[55, 53],
[80, 45],
[56, 4],
[32, 61],
[59, 33],
[42, 78],
[57, 75],
[26, 55],
[21, 87],
[68, 79],
[29, 29],
[43, 89],
[14, 19],
[74, 35],
[19, 43],
[81, 99],
[15, 73],
[56, 64],
[63, 19],
[2, 85],
[7, 19],
[87, 67],
[47, 22],
[30, 39],
[8, 8],
[50, 10],
[77, 7],
[62, 63],
[67, 57],
[18, 35],
[4, 73],
[35, 87],
[54, 20],
[20, 2],
[38, 57],
[68, 4],
[23, 30],
[10, 34],
[50, 97],
[63, 99],
[73, 63],
[95, 15],
[10, 69],
[67, 96],
[79, 84],
[81, 57],
[42, 20],
[42, 25],
[95, 77],
[75, 16],
[12, 53],
[18, 24],
[60, 87],
[38, 36],
[43, 47],
[93, 67],
[10, 95],
[68, 44],
[87, 10],
[48, 91],
[16, 48],
[27, 76],
[99, 59],
[33, 82],
[94, 99],
[100, 26],
[76, 24],
[55, 27],
[38, 14],
[30, 96],
[15, 63],
[54, 83],
[90, 78],
[6, 37],
[39, 31],
[14, 96],
[44, 55],
[30, 21],
[87, 42],
[77, 38],
[48, 36],
[72, 74],
[37, 7],
[24, 94],
[56, 41],
[47, 6],
[44, 15],
[50, 75],
[70, 91],
[77, 76],
[62, 36],
[14, 88],
[42, 66],
[0, 74],
[24, 68],
[62, 77],
[9, 64],
[47, 94],
[52, 39],
[63, 7],
[60, 48],
[82, 88],
[21, 61],
[95, 39],
[83, 15],
[51, 32],
[5, 13],
[28, 49],
[47, 87],
[70, 15],
[84, 74],
[100, 16],
[77, 2],
[21, 8],
[3, 28],
[97, 69],
[61, 15],
[26, 41],
[84, 25],
[5, 79],
[61, 52],
[77, 66],
[88, 84],
[3, 9],
[87, 35],
[69, 84],
[57, 17],
[88, 1],
[9, 89],
[2, 17],
[9, 42],
[36, 60],
[73, 6],
[97, 49],
[30, 6],
[92, 32],
[32, 93],
[64, 45],
[81, 78],
[64, 84],
[3, 63],
[33, 15],
[74, 30],
[92, 22],
[86, 6],
[40, 97],
[64, 30],
[11, 80],
[9, 29],
[51, 48],
[88, 92],
[79, 33],
[53, 77],
[16, 53],
[27, 87],
[87, 89],
[23, 90],
[27, 66],
[45, 61],
[46, 2],
[96, 8],
[87, 61],
[29, 35],
[16, 13],
[60, 27],
[72, 52],
[25, 72],
[6, 58],
[86, 46],
[42, 74],
[68, 0],
[41, 93],
[78, 52],
[68, 71],
[21, 37],
[98, 82],
[98, 91],
[31, 65],
[5, 85],
[69, 48],
[51, 26],
[78, 94],
[42, 38],
[47, 45],
[95, 57],
[56, 60],
[75, 92],
[59, 6],
[4, 99],
[39, 23],
[2, 53],
[19, 20],
[4, 1],
[70, 60],
[38, 69],
[68, 19],
[30, 44],
[67, 9],
[56, 88],
[77, 70],
[64, 59],
[94, 19],
[39, 46],
[94, 71],
[14, 31],
[61, 73],
[14, 57],
[44, 29],
[95, 86],
[50, 53],
[15, 2],
[30, 80],
[5, 25],
[24, 14],
[89, 50],
[82, 7],
[2, 37],
[25, 5],
[11, 9],
[29, 25],
[31, 84],
[21, 79],
[94, 1],
[31, 89],
[63, 67],
[53, 14],
[38, 0],
[53, 61],
[38, 79],
[46, 77],
[77, 11],
[20, 13],
[77, 43],
[70, 27],
[22, 58],
[19, 96],
[14, 68],
[44, 84],
[21, 23],
[52, 92],
[28, 58],
[5, 5],
[99, 78],
[60, 11],
[15, 77],
[54, 96],
[92, 94],
[82, 30],
[57, 31],
[56, 68],
[32, 8],
[33, 51],
[82, 50],
[81, 40],
[73, 20],
[17, 16],
[93, 11],
[39, 10],
[50, 44],
[9, 22],
[15, 27],
[12, 92],
[21, 47],
[89, 25],
[21, 34],
[99, 36],
[12, 49],
[59, 38],
[17, 60],
[100, 41],
[25, 20],
[53, 6],
[60, 96],
[43, 5],
[79, 61],
[67, 91],
[21, 5],
[10, 38],
[54, 57],
[40, 42],
[33, 70],
[4, 44],
[24, 52],
[96, 74],
[31, 99],
[86, 54],
[28, 10],
[27, 13],
[80, 17],
[5, 88],
[38, 4],
[7, 62],
[92, 41],
[40, 71],
[11, 19],
[64, 55],
[53, 80],
[91, 3],
[95, 54],
[76, 82],
[98, 29],
[26, 27],
[21, 27],
[15, 23],
[47, 32],
[33, 19],
[73, 46],
[36, 49],
[0, 56],
[39, 18],
[57, 55],
[80, 2],
[19, 83],
[13, 44],
[96, 24],
[88, 38],
[70, 56],
[74, 39],
[18, 72],
[18, 76],
[35, 30],
[85, 19],
[75, 72],
[82, 96],
[80, 68],
[10, 57],
[61, 84],
[66, 33],
[9, 73],
[37, 63],
[66, 99],
[90, 61],
[5, 94],
[25, 79],
[68, 75],
[23, 43],
[71, 78],
[66, 21],
[76, 60],
[6, 50],
[61, 90],
[12, 72],
[71, 65],
[55, 0],
[45, 80],
[98, 63],
[30, 2],
[45, 65],
[83, 54],
[47, 12],
[7, 32],
[16, 43],
[0, 26],
[56, 49],
[18, 40],
[13, 36],
[85, 32],
[74, 27],
[43, 41],
[86, 96],
[15, 85],
[35, 37],
[79, 97],
[79, 26],
[42, 52],
[18, 7],
[70, 40],
[92, 49],
[37, 54],
[45, 74],
[83, 84],
[86, 14],
[94, 47],
[26, 97],
[52, 65],
[49, 68],
[41, 14],
[65, 1],
[53, 50],
[78, 21],
[49, 20],
[29, 54],
[33, 41],
[56, 79],
[9, 4],
[3, 81],
[50, 5],
[34, 22],
[95, 93],
[77, 86],
[59, 45],
[68, 52],
[88, 19],
[23, 77],
[91, 9],
[94, 51],
[4, 56],
[18, 65],
[41, 58],
[50, 84],
[79, 5],
[78, 80],
[8, 81],
[0, 8],
[0, 89],
[97, 3],
[40, 6],
[83, 59],
[73, 14],
[35, 57],
[23, 1],
[8, 12],
[26, 31],
[85, 71],
[91, 30],
[54, 43],
[66, 69],
[8, 51],
[45, 18],
[64, 80],
[72, 84],
[12, 83],
[61, 25],
[95, 34],
[87, 75],
[89, 6],
[36, 33],
[75, 0],
[29, 82],
[74, 54],
[56, 73],
[21, 70],
[69, 94],
[96, 65],
[29, 73],
[84, 40],
[49, 14],
[60, 20],
[66, 39],
[79, 14],
[76, 33],
[92, 76],
[95, 44],
[37, 83],
[74, 89],
[70, 8],
[84, 43],
[91, 57],
[46, 38],
[67, 61],
[34, 78],
[6, 21],
[58, 1],
[40, 64],
[83, 23],
[40, 88],
[48, 63],
[63, 48],
[64, 11],
[100, 23],
[44, 59],
[59, 61],
[12, 89],
[100, 46],
[31, 36],
[65, 53],
[95, 90],
[25, 87],
[70, 88],
[11, 98],
[4, 76],
[96, 10],
[39, 27],
[52, 100],
[89, 53],
[18, 10],
[71, 17],
[48, 54],
[59, 64],
[86, 65],
[32, 28],
[8, 15],
[75, 77],
[66, 24],
[64, 95],
[79, 9],
[5, 69],
[4, 61],
[22, 97],
[28, 47],
[8, 26],
[88, 32],
[84, 12],
[37, 89],
[4, 39],
[84, 56],
[80, 76],
[64, 71],
[59, 41],
[34, 44],
[86, 78],
[0, 68],
[71, 33],
[48, 72],
[44, 93],
[11, 6],
[24, 65],
[12, 17],
[89, 70],
[0, 50],
[90, 12],
[45, 49],
[17, 87],
[81, 82],
[23, 39],
[7, 45],
[40, 76],
[69, 11],
[59, 51],
[10, 45],
[85, 86],
[75, 9],
[98, 57],
[49, 40],
[43, 72],
[54, 24],
[12, 22],
[47, 67],
[100, 84],
[47, 84],
[20, 90],
[26, 8],
[73, 94],
[21, 53],
[29, 64],
[75, 4],
[16, 21],
[89, 87],
[84, 68],
[98, 39],
[81, 27],
[45, 24],
[35, 5],
[12, 0],
[54, 31],
[14, 9],
[77, 35],
[77, 47],
[35, 12],
[58, 70],
[90, 66],
[65, 4],
[18, 62],
[12, 28],
[81, 91],
[88, 44],
[99, 13],
[28, 94],
[43, 87],
[50, 23],
[75, 65],
[47, 57],
[92, 85],
[70, 68],
[63, 87],
[71, 37],
[65, 36],
[91, 20],
[89, 100],
[76, 95],
[57, 85],
[59, 35],
[91, 82],
[87, 25],
[39, 39],
[6, 30],
[6, 40],
[65, 77],
[45, 88],
[7, 97],
[23, 25],
[55, 10],
[92, 80],
[66, 43],
[34, 91],
[63, 33],
[51, 94],
[41, 23],
[49, 78],
[71, 81],
[83, 48],
[38, 95],
[26, 68],
[89, 42],
[0, 82],
[53, 12],
[98, 52],
[26, 52],
[3, 20],
[95, 21],
[2, 77],
[57, 66],
[97, 27],
[61, 75],
[37, 76],
[32, 4],
[23, 83],
[61, 8],
[57, 7],
[34, 64],
[33, 59],
[36, 16],
[87, 81],
[51, 36],
[77, 56],
[27, 4],
[60, 30],
[35, 95],
[91, 69],
[28, 20],
[35, 74],
[79, 64],
[23, 7],
[21, 94],
[57, 25],
[61, 66],
[56, 21],
[14, 70],
[83, 34],
[24, 48],
[11, 3],
[98, 18],
[58, 92],
[42, 31],
[43, 1],
[80, 37],
[21, 31],
[41, 36],
[31, 14],
[96, 79],
[73, 24],
[31, 50],
[78, 99],
[97, 60],
[32, 1],
[71, 30],
[79, 48],
[7, 77],
[95, 30],
[14, 90],
[23, 33],
[45, 91],
[89, 22],
[70, 5],
[3, 31],
[35, 72],
[15, 50],
[27, 39],
[85, 62],
[83, 9],
[94, 36],
[59, 98],
[64, 17],
[29, 61],
[68, 99],
[31, 30],
[36, 39],
[63, 3],
[66, 29],
[59, 79],
[3, 7],
[62, 13],
[36, 24],
[26, 89],
[67, 16],
[14, 15],
[68, 22],
[80, 87],
[87, 72],
[51, 7],
[58, 95],
[3, 74],
[71, 45],
[54, 90],
[17, 26],
[8, 91],
[91, 27],
[48, 48],
[7, 66],
[52, 55],
[6, 10],
[48, 25],
[48, 1],
[58, 89],
[89, 59],
[99, 71],
[32, 96],
[58, 53],
[14, 46],
[20, 40],
[52, 73],
[86, 92],
[20, 68],
[13, 5],
[29, 32],
[75, 85],
[64, 61],
[93, 59],
[51, 82],
[68, 34],
[2, 89],
[82, 66],
[25, 59],
[14, 55],
[0, 44],
[12, 63],
[78, 73],
[52, 85],
[42, 69],
[12, 74],
[25, 17],
[76, 19],
[62, 69],
[16, 8],
[51, 29],
[13, 79],
[24, 92],
[42, 28],
[7, 43],
[93, 74],
[49, 60],
[99, 68],
[73, 67],
[62, 60],
[5, 47],
[95, 5],
[42, 81],
[97, 98],
[32, 68],
[67, 94],
[73, 60],
[32, 38],
[39, 20],
[23, 61],
[28, 98],
[61, 18],
[88, 63],
[66, 63],
[0, 87],
[97, 15],
[37, 29],
[19, 47],
[92, 14],
[41, 54],
[95, 96],
[39, 33],
[12, 40],
[83, 90],
[40, 81],
[99, 89],
[14, 100],
[18, 100],
[25, 100],
[38, 100],
[47, 100],
[56, 100],
[70, 100],
[74, 100],
[85, 100],
[44, 100],
[88, 4],
[14, 60],
[42, 44],
[35, 68],
[51, 38],
[14, 34],
[13, 86],
[67, 27],
[82, 3],
[34, 26],
[33, 87],
[51, 18],
[89, 27],
[3, 14],
[22, 20],
[21, 65],
[96, 41],
[49, 88],
[59, 15],
[17, 4],
[91, 98],
[52, 63],
[69, 50],
[44, 21],
[51, 80],
[19, 85],
[10, 50],
[97, 88],
[19, 74],
[21, 84],
[57, 43],
[17, 95],
[29, 77],
[78, 45],
[23, 79],
[2, 49],
[91, 24],
[74, 50],
[9, 59],
[61, 23],
[31, 24],
[30, 57],
[88, 48],
[98, 8],
[45, 51],
[17, 0],
[63, 89],
[0, 39],
[17, 45],
[36, 47],
[26, 34],
[48, 9],
[46, 34],
[83, 73],
[45, 31],
[33, 100],
[18, 33],
[30, 93],
[85, 83],
[50, 50],
[23, 72],
[92, 64],
[53, 4],
[43, 13],
[60, 54],
[2, 96],
[85, 59],
[63, 64],
[18, 38],
[42, 49],
[53, 68],
[96, 18],
[97, 72],
[28, 43],
[56, 33],
[58, 19],
[95, 63],
[23, 55],
[19, 80],
[17, 78],
[53, 17],
[82, 1],
[10, 82],
[61, 40],
[77, 63],
[70, 2],
[35, 9],
[7, 93],
[7, 89],
[89, 90],
[76, 14],
[84, 5],
[68, 54],
[43, 64],
[78, 18],
[96, 84],
[77, 4],
[13, 51],
[75, 45],
[49, 33],
[45, 27],
[16, 19],
[41, 9],
[83, 21],
[4, 36],
[67, 82],
[30, 67],
[80, 23],
[66, 46],
[54, 87],
[5, 16],
[49, 55],
[89, 10],
[35, 1],
[78, 15],
[80, 43],
[7, 64],
[42, 96],
[71, 42],
[3, 69],
[73, 58],
[18, 97],
[62, 44],
[86, 76],
[2, 45],
[16, 33],
[32, 78],
[47, 97],
[89, 35],
[38, 59],
[85, 23],
[78, 41],
[45, 40],
[83, 52],
[23, 12],
[86, 0],
[58, 47],
[40, 48],
[0, 20],
[73, 17],
[69, 77],
[28, 23],
[39, 91],
[60, 4],
[37, 97],
[14, 65],
[12, 66],
[57, 98],
[59, 77],
[68, 59],
[22, 99],
[31, 47],
[75, 41],
[100, 7],
[66, 31],
[56, 77],
[35, 53],
[93, 28],
[86, 17],
[6, 28],
[40, 68],
[81, 14],
[67, 13],
[34, 84],
[16, 37],
[98, 75],
[76, 29],
[19, 4],
[93, 24],
[31, 17],
[6, 2],
[10, 55],
[49, 93],
[54, 75],
[48, 30],
[73, 71],
[56, 38],
[20, 58],
[57, 81],
[67, 7],
[22, 10],
[64, 91],
[84, 78],
[42, 34],
[83, 69],
[67, 85],
[21, 44],
[86, 3],
[3, 25],
[71, 20],
[18, 49],
[50, 91],
[8, 20],
[55, 14],
[44, 78],
[30, 12],
[34, 89],
[35, 81],
[83, 18],
[90, 39],
[24, 75],
[100, 62],
[38, 65],
[86, 8],
[68, 41],
[68, 46],
[83, 27],
[92, 60],
[15, 98],
[65, 9],
[56, 91],
[48, 79],
[93, 9],
[97, 93],
[38, 61],
[52, 45],
[84, 97],
[39, 85],
[43, 76],
[66, 11],
[66, 19],
[30, 9],
[93, 43],
[62, 81],
[42, 98],
[52, 58],
[45, 57],
[75, 22],
[100, 56],
[75, 68],
[19, 54],
[92, 35],
[8, 71],
[22, 49],
[8, 86],
[74, 83],
[7, 74],
[9, 6],
[23, 4],
[27, 81],
[25, 85],
[83, 45],
[46, 14],
[90, 47],
[94, 91],
[79, 3],
[72, 15],
[59, 58],
[79, 55],
[37, 11],
[31, 82],
[47, 4],
[26, 18],
[70, 25],
[22, 2],
[96, 13],
[61, 34],
[91, 1],
[77, 91],
[63, 97],
[85, 35],
[26, 57],
[56, 19],
[87, 52],
[13, 26],
[9, 78],
[100, 81],
[80, 12],
[97, 47],
[71, 49],
[15, 93],
[75, 36],
[95, 68],
[2, 72],
[54, 98],
[6, 56],
[71, 95],
[66, 0],
[62, 28],
[16, 99],
[25, 22],
[73, 77],
[70, 29],
[75, 52],
[98, 24],
[99, 2],
[81, 24],
[93, 16],
[7, 47],
[29, 51],
[3, 94],
[88, 13],
[57, 28],
[13, 2],
[28, 84],
[12, 77],
[35, 18],
[56, 57],
[9, 62],
[17, 89],
[88, 56],
[96, 31],
[29, 41],
[84, 88],
[42, 56],
[85, 48],
[71, 54],
[2, 83],
[50, 76],
[63, 51],
[36, 84],
[69, 63],
[44, 3],
[54, 63],
[78, 24],
[49, 46],
[34, 76],
[58, 10],
[92, 71],
[99, 31],
[54, 38],
[39, 49],
[38, 25],
[69, 86],
[79, 59],
[66, 59],
[29, 88],
[31, 59],
[97, 67],
[70, 73],
[58, 13],
[76, 97],
[67, 48],
[53, 52],
[48, 39],
[90, 76],
[97, 6],
[64, 39],
[38, 6],
[6, 6],
[59, 31],
[12, 95],
[90, 51],
[8, 36],
[35, 55],
[19, 69],
[51, 21],
[90, 85],
[30, 74],
[18, 89],
[46, 8],
[27, 25],
[74, 32],
[33, 67],
[0, 52],
[98, 11],
[60, 92],
[38, 16],
[22, 66],
[48, 69],
[40, 0],
[82, 32],
[26, 50],
[3, 87],
[92, 87],
[28, 56],
[25, 39],
[10, 92],
[12, 56],
[21, 29],
[46, 47],
[39, 44],
[11, 42],
[55, 81],
[45, 86],
[19, 60],
[85, 37],
[53, 26],
[33, 98],
[39, 55],
[71, 10],
[13, 12],
[19, 15],
[94, 80],
[11, 23],
[61, 50],
[75, 75],
[45, 68],
[3, 3],
[78, 51],
[28, 7],
[46, 29],
[58, 73],
[81, 54],
[54, 33],
[88, 94],
[27, 63],
[13, 23],
[5, 92],
[96, 36],
[53, 29],
[50, 72],
[52, 98],
[14, 52],
[17, 70],
[97, 86],
[91, 17],
[5, 8],
[26, 93],
[44, 7],
[88, 23],
[19, 93],
[36, 44],
[8, 84],
[79, 1],
[29, 37],
[53, 9],
[82, 12],
[54, 41],
[32, 45],
[54, 93],
[51, 41],
[13, 81],
[44, 36],
[19, 98],
[84, 14],
[37, 22],
[41, 90],
[66, 41],
[47, 88],
[88, 40],
[21, 14],
[13, 42],
[89, 67],
[23, 63],
[72, 90],
[65, 79],
[10, 13],
[8, 79],
[29, 86],
[49, 42],
[5, 83],
[24, 50],
[11, 47],
[19, 45],
[17, 83],
[50, 87],
[88, 65],
[35, 70],
[43, 18],
[93, 96],
[10, 67],
[64, 75],
[34, 20],
[51, 15],
[82, 76],
[21, 76],
[20, 72],
[15, 35],
[59, 70],
[42, 60],
[78, 31],
[27, 36],
[70, 38],
[8, 28],
[21, 89],
[35, 29],
[74, 48],
[77, 95],
[72, 99],
[30, 19],
[70, 76],
[100, 38],
[74, 87],
[16, 75],
[100, 51],
[23, 26],
[25, 70],
[65, 65],
[22, 81],
[4, 59],
[89, 94],
[77, 31],
[97, 1],
[77, 27],
[77, 78],
[70, 97],
[34, 61],
[5, 18],
[52, 30],
[46, 93],
[92, 50],
[99, 50],
[58, 17],
[32, 91],
[67, 2],
[44, 45],
[21, 12],
[10, 17],
[71, 12],
[11, 87],
[60, 37],
[16, 50],
[12, 33],
[63, 22],
[57, 36],
[33, 17],
[72, 40],
[5, 65],
[37, 81],
[25, 77],
[87, 98],
[42, 100],
[31, 52],
[19, 28],
[93, 56],
[82, 93],
[94, 32],
[63, 5],
[94, 65],
[66, 76],
[13, 7],
[47, 60],
[86, 13],
[3, 79],
[90, 33],
[17, 11],
[9, 40],
[65, 51],
[81, 47],
[69, 6],
[9, 100],
[27, 28],
[11, 70],
[80, 52],
[31, 33],
[58, 4],
[60, 59],
[62, 96],
[37, 38],
[12, 97],
[63, 82],
[21, 92],
[75, 40],
[17, 14],
[13, 29],
[14, 75],
[69, 32],
[2, 51],
[33, 46],
[25, 30],
[23, 45],
[31, 40],
[83, 100],
[62, 46],
[38, 71],
[55, 50],
[5, 51],
[2, 12],
[16, 57],
[62, 17],
[99, 58],
[75, 61],
[18, 52],
[46, 52],
[5, 62],
[80, 8],
[11, 30],
[69, 21],
[32, 80],
[81, 34],
[37, 36],
[67, 89],
[70, 53],
[79, 70],
[39, 93],
[21, 42],
[65, 86],
[16, 31],
[7, 99],
[12, 38],
[61, 98],
[55, 61],
[47, 20]
];


function addNode($w, $h) {
    global $nodes, $nodesCount, $originalOrderNodes;

    $tspNode = new TspNode();
    $tspNode->x = $w;
    $tspNode->y = $h;
    $tspNode->distanceTo = 0;


    $debugNode = new TspNode();
    $debugNode->x = $tspNode->x;
    $debugNode->y = $tspNode->y;
    $originalOrderNodes[] = $debugNode;

    $newNodeIndex = null;

    if ($nodesCount == 0) {
        $nodes[] = $tspNode;
        $newNodeIndex = 0;
    } elseif ($nodesCount == 1) {

        $tspNode->distanceTo = sqrt(pow($tspNode->x - $nodes[0]->x, 2) + (pow($tspNode->y - $nodes[0]->y, 2)));

        $nodes[0]->distanceTo = $tspNode->distanceTo;
        $nodes[] = $tspNode;
        $newNodeIndex = 1;
    } else {
        $minLoss = PHP_INT_MAX;
        $newNodeDistanceFrom = 0;

        foreach ($nodes as $position => $node) {
            $nextNodeIndex = ($position+1 < count($nodes)) ? $position+1 : 0;

            $distanceTo = sqrt(pow($tspNode->x - $nodes[$position]->x, 2) + (pow($tspNode->y - $nodes[$position]->y, 2)));;
            $distanceFrom = sqrt(pow($tspNode->x - $nodes[$nextNodeIndex]->x, 2) + (pow($tspNode->y - $nodes[$nextNodeIndex]->y, 2)));;

            $loss = $distanceTo + $distanceFrom - $nodes[$nextNodeIndex]->distanceTo;
            if ($loss < $minLoss) {
                $minLoss = $loss;
                $newNodeIndex = $position+1;

                $tspNode->distanceTo = $distanceTo;
                $newNodeDistanceFrom = $distanceFrom;
            }

        }

        array_splice($nodes, $newNodeIndex, 0, array($tspNode));

        $nextNodeIndex = ($newNodeIndex+1 < count($nodes)) ? $newNodeIndex+1 : 0;
        $nodes[$nextNodeIndex]->distanceTo = $newNodeDistanceFrom;

//        print_r('['.$newNodeIndex.']');
//        die();
    }

    $nodesCount++;
//    print_r('['.$newNodeIndex.']');

    return $newNodeIndex;

}

function testAngle($a, $b, $c) {
    $abX = $b[0] - $a[0];
    $abY = $b[1] - $a[1];
    $cbX = $b[0] - $c[0];
    $cbY = $b[1] - $c[1];

    $dot = ($abX * $cbX + $abY * $cbY); // dot product

    $cross = ($abX * $cbY - $abY * $cbX); // cross product


    $alpha = atan2($cross, $dot);

var_dump(180-abs($alpha * 180. / pi() + 0.5));

//return $alpha;
    return ($alpha * 180. / pi() + 0.5);

    return floor($alpha * 180. / pi() + 0.5);
}

//testAngle([0, 0], [-1, 5], [0, 10]);
//testAngle([0, 0], [5, -1], [10, 0]);

//die('tested');


function getAngle($a, $b, $c) {
    $abX = $b->x - $a->x;
    $abY = $b->y - $a->y;
    $cbX = $b->x - $c->x;
    $cbY = $b->y - $c->y;

    $dot = ($abX * $cbX + $abY * $cbY); // dot product
    $cross = ($abX * $cbY - $abY * $cbX); // cross product

    $alpha = atan2($cross, $dot);

//return $alpha;
    return 180-abs(($alpha * 180. / pi() + 0.5));

    return floor($alpha * 180. / pi() + 0.5);
}

function getLeastDamage($w, $h, $lastNodeIndex = null) {
    global $nodes, $nodesCount;

    $tspNode = new TspNode();
    $tspNode->x = $w;
    $tspNode->y = $h;
    $tspNode->distanceTo = 0;


    if ($nodesCount == 0) {
	die('error nodesCount 0');
        return 0;
    } elseif ($nodesCount == 1) {
	die('error nodesCount 1');
        $tspNode->distanceTo = sqrt(pow($tspNode->x - $nodes[0]->x, 2) + (pow($tspNode->y - $nodes[0]->y, 2)));
        return $tspNode->distanceTo;
    } else {
        $minLoss = 360;

        foreach ($nodes as $position => $node) {
            if (!is_null($lastNodeIndex)) {
                if (($position+1 != $lastNodeIndex)&&($position != $lastNodeIndex)) {
                    //continue;
                }

            }

            $nextNodeIndex = ($position+1 < count($nodes)) ? $position+1 : 0;

		$loss = getAngle($nodes[$position], $tspNode, $nodes[$nextNodeIndex]);
/*
            $distanceTo = sqrt(pow($tspNode->x - $nodes[$position]->x, 2) + (pow($tspNode->y - $nodes[$position]->y, 2)));;
            $distanceFrom = sqrt(pow($tspNode->x - $nodes[$nextNodeIndex]->x, 2) + (pow($tspNode->y - $nodes[$nextNodeIndex]->y, 2)));;

            $loss = $distanceTo + $distanceFrom - $nodes[$nextNodeIndex]->distanceTo;
*/
            if ($loss < $minLoss) {
                $minLoss = $loss;
            }

        }

        return $minLoss;

    }

}

//shuffle($toImport);

$lastNodeInserted = null;

addNode($toImport[0][0]*8, $toImport[0][1]*8);
unset($toImport[0]);

$lastNodeInserted = addNode($toImport[1][0]*8, $toImport[1][1]*8);
unset($toImport[1]);

$lastNodeInserted = addNode($toImport[2][0]*8, $toImport[2][1]*8);
unset($toImport[2]);

$lastNodeInserted = addNode($toImport[3][0]*8, $toImport[3][1]*8);
unset($toImport[3]);

$lastNodeInserted = addNode($toImport[4][0]*8, $toImport[4][1]*8);
unset($toImport[4]);


while (!empty($toImport)) {
//for ($counter=0; $counter<200; $counter++) {

    $minDamage = 360;
    $bestNode = 0;

    foreach ($toImport as $i => $data) {

        $damage = getLeastDamage($data[0]*8, $data[1]*8, $lastNodeInserted);

        if ($damage < $minDamage) {
            $minDamage = $damage;
            $bestNode = $i;
        }

	if ($minDamage == 0) {
		break;
}
    }

//var_dump($minDamage);

//    if ($minDamage > 0) {
//        print_r('Damage('.$minDamage.')');
//        print_r($lastNodeInserted);
//        print_r($bestNode);
//        print_r($toImport[$bestNode]);
//    }

    $lastNodeInserted = addNode($toImport[$bestNode][0]*8, $toImport[$bestNode][1]*8);

//    if ($minDamage > 0) {
//        print_r($lastNodeInserted);
//        die();
//
//    }


    unset($toImport[$bestNode]);
}

//die();

$nodePoints = [];
foreach ($nodes as $node) {
    $nodePoints[] = $node->x;
    $nodePoints[] = $node->y;
}

//print_r($nodePoints);
//die();

// create image
$image = imagecreatetruecolor($imageWidth, $imageHeight);

// allocate colors
$bg   = imagecolorallocate($image, 0, 0, 0);
$blue = imagecolorallocate($image, 0, 0, 255);

// fill the background
imagefilledrectangle($image, 0, 0, $imageWidth-1, $imageHeight-1, $bg);

// draw a polygon
imagepolygon($image, $nodePoints, count($nodePoints)/2, $blue);

$col_ellipse = imagecolorallocate($image, 255, 255, 255);

$totalDistance = 0;
// draw the white ellipse
foreach ($nodes as $node) {
    $totalDistance += $node->distanceTo;
    $nodePoints[] = $node->x;
    $nodePoints[] = $node->y;
    imagefilledellipse($image, $node->x-1, $node->y-1, 3, 2, $col_ellipse);
}

$output = '';
foreach ($nodes as $node) {
    $output .= $node->x/8 . ',' . $node->y/8 . "\n";
}


file_put_contents('1500nodes.txt', $output);

$Originaloutput = print_r($originalOrderNodes, true);
file_put_contents('1500nodes_original.txt', $Originaloutput);

file_put_contents('1500nodes_distance.txt', 'Total: ' . $totalDistance/8);



//return;

// flush image

echo "done. " . PHP_EOL . " total distance: ";

echo $totalDistance/8 . PHP_EOL;

return;

header('Content-type: image/png');
imagepng($image);
imagedestroy($image);
